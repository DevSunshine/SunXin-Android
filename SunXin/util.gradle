def injectTask(){
    tasks.whenTaskAdded{
        task ->
            if (isPluginApk()){
                if(task.name.equals("assembleDebug")){
                    println('===========assembleDebug============')
                    task << {
                        def tasks = project.getTasksByName('copyAPKToSDCard',false)
                        def name = project.name+".apk" ;
                        if (tasks.size() > 0){
                            println("===========copy ${name} to SDCard============")
                            getCrc('debug')
                            for (int i = 0 ; i < tasks.size() ; i ++){
                                tasks[i].execute()
                            }
                        }
                        tasks = project.getTasksByName('copyPluginFileToSDCard',false)
                        if (tasks.size() > 0){
                            for (int i = 0 ; i < tasks.size() ; i ++){
                                tasks[i].execute()
                            }
                        }

                    }
                }
                if (task.name.equals("assembleRelease")){
                    task << {
                        def tasks = project.getTasksByName('copyAPKTarget',false)
                        def name = project.name+".apk" ;
                        if (tasks.size() > 0){
                            println("===========copy ${name} to SDCard============")
                            getCrc('release')
                            for (int i = 0 ; i < tasks.size() ; i ++){
                                tasks[i].execute()
                            }
                        }
                        tasks = project.getTasksByName('copyConfigTarget',false)
                        if (tasks.size() > 0){
                            for (int i = 0 ; i < tasks.size() ; i ++){
                                tasks[i].execute()
                            }
                        }

                    }
                }
            }else if (project.name.equals("Host")){
                if(task.name.equals("assembleDebug")){
                    task <<{
                        def tasks = project.getTasksByName('copyHostJarTarget',false)
                        if (tasks.size() > 0){
                            for (int i = 0 ; i < tasks.size() ; i ++){
                                tasks[i].execute()
                            }
                        }
                    }
                }
                if(task.name.equals("assembleRelease")){
                    task <<{
                        def tasks = project.getTasksByName('deleteAssets',false)
                        if (tasks.size() > 0){
                            for (int i = 0 ; i < tasks.size() ; i ++){
                                println('==========deleteAssets=========')
                                tasks[i].execute()
                            }
                        }
                    }
                }
            }
    }
}

def isPluginApk(){
    for(name in gradle.pluginApk){
       if (name.equals(project.name)){
           return true ;
       }
    }
    return false ;
}
def getSDCardPath(){
    return '/sdcard/plugins/'
}
def getSDCardPluginPath(){
    return '/sdcard/plugins/'+project.name+'.apk'
}
def getPluginApkPath(buildType){
    return project.projectDir.absolutePath+"/build/outputs/apk/"+project.name+"-${buildType}.apk"
}

def getCrc(buildType){
    def start = System.currentTimeMillis() ;
    def crc = ZipUtil.getZipCrc(getPluginApkPath("$buildType"))
    def end = System.currentTimeMillis() ;
    def total = end - start ;


    def pluginXml = rootDir.absolutePath+"/plugins.xml"
    Properties properties = new Properties() ;
//    File pro = new File(rootDir.absolutePath+"/plugin.properties")
    def xmlFile = project.file("plugin.properties")
    properties.load(xmlFile.newInputStream())
    def pluginId = properties.getProperty("id")
    def version = properties.getProperty("version")
    def rootFragment = properties.getProperty("rootFrament")
    XMLOperate.updateCrcXml("$pluginXml",pluginId,version,rootFragment,project.name,crc)
    println('=======getCrc=========='+"$crc"+"============$version")
}

def getENVPath(){
    def env = System.env.ANDROID_HOME ;
    //不知道为啥，在 mac 上面获取到的是 null，蛋疼
    if (env == null){
        println('=======getENVPath==========')
        FileUtil util = new FileUtil() ;
        return util.getPropertyEnv(rootDir.absolutePath+"/local.properties")
    }else {

        return env
    }
}
ext{
    getSDCardPath  = this.&getSDCardPath ;
    getCrc  = this.&getCrc ;
    injectTask  = this.&injectTask ;
    getSDCardPluginPath  = this.&getSDCardPluginPath ;
    getPluginApkPath  = this.&getPluginApkPath ;
    getENVPath  = this.&getENVPath ;
}
