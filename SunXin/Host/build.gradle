apply plugin: 'com.android.application'
android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "sunxin.sunshine.com.sunxin"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            buildConfigField "boolean", "API_ENV", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "API_ENV", "true"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.jakewharton:butterknife:8.2.1'
    compile project(':SSSocket')
    compile "com.android.support:multidex:1.0.0"
    compile fileTree(dir: rootProject.rootDir.absolutePath+File.separator+'jars'+File.separator+'compileJar',include: ['*.jar'])
    compile fileTree(dir: rootProject.rootDir.absolutePath+File.separator+'jars'+File.separator+'libsJar',include: ['*.jar'])
}


doSomthing()
def doSomthing(){
    android.applicationVariants.all{

        variant->

            variant.outputs.each{
                output ->
                    output.processResources.doLast{
                        def utis = new FileUtil() ;
                    }
            }
        variant.dex.doFirst{
            def utis = new FileUtil() ;
        }
    }

}

addTask()

def addTask(){
    tasks.whenTaskAdded{
        task ->
            if(task.name.equals('zipalignDebug')){

                task<<{
                    def tasks = project.getTasksByName('makeHostJar',false)
                    if (tasks.size() > 0){
                        for (int i = 0 ; i < tasks.size() ; i ++){
                            println('==========================makeHostJar=============')
                            tasks[i].execute()
                        }
                    }
                }
            }
            if(task.name.equals('dexDebug')){

                task.doFirst{
                    def tasks = project.getTasksByName('doTask',false)
                    if (tasks.size() > 0){
                        for (int i = 0 ; i < tasks.size() ; i ++){
                            tasks[i].execute()
                        }
                    }
                }
            }
    }
}

task hostCopy(type: org.gradle.api.tasks.Copy){
    def jarDebugPath = "${projectDir}${File.separator}" +
            "build${File.separator}" +
            "intermediates${File.separator}" +
            "transforms${File.separator}" +
            "jarMerging${File.separator}" +
            "debug${File.separator}" +
            "jars${File.separator}" +
            "1${File.separator}" +
            "1f${File.separator}" +
            "combined.jar"

    from "$jarDebugPath"

    into project.projectDir.absolutePath + "/hostcopo.jar"
}

task doTask <<{
    println('==========================testDOtASK=============')
}

task jarHost(type : Exec){
    def path = "$System.env.JAVA_HOME/bin/jar"
    println('==========================path============='+project.projectDir.absolutePath)
    workingDir project.projectDir.absolutePath
    def classdir = 'build/intermediates/classes/debug/'
    println('==========================classdir============='+classdir)
    commandLine "$path", "cf", "../libsjar/host.jar","-C", "$classdir", "."
}

task makeJar(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName 'sdk'
    //从哪里打包class文件
    from('build/intermediates/classes/debug/org/cmdmac/cloud/pluginsdk/')
    //打包到jar后的目录结构
    into('org/cmdmac/cloud/pluginsdk/')
    //去掉不需要打包的目录和文件
    exclude('test/', 'BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude{ it.name.startsWith('R$');}
}

task makeHostJar(type: org.gradle.api.tasks.bundling.Jar){
    baseName 'test'
    from (project.projectDir.absolutePath+File.separator +'build/intermediates/exploded-aar/')
}


task makeSdkJar(type:org.gradle.api.tasks.bundling.Jar) {

    baseName 'pluginsdk'
    //只打包org.cmdmac下的org.cmdmac.pluginsdk.impl和org.cmdmac.gamecenter,其他子包不会被打包进去
    from('build/intermediates/classes/debug/org/cmdmac/') {
        include 'pluginsdk/impl'
        include 'gamecenter'
    }
    into('org/cmdmac/')
//    exclude('R.class')
//    exclude{ it.name.startsWith('R$');}
}