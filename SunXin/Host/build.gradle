apply from: "../util.gradle"
injectTask()
apply plugin: 'com.android.application'

android {
    compileSdkVersion "${gradle.ext.compileSdkVersion}" as int
    buildToolsVersion "${gradle.ext.buildToolsVersion}"
    signingConfigs {
        releaseConfig {
            keyAlias 'sunshine'
            keyPassword 'sunshinesunxin'
            storeFile file("../sunshine_sunxin.jks")
            storePassword 'sunshinesunxin'
        }
    }
    defaultConfig {
        applicationId "com.sunxin.app"
        minSdkVersion "${gradle.ext.minSdkVersion}" as int
        targetSdkVersion "${gradle.ext.targetSdkVersion}" as int
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            buildConfigField "boolean", "API_ENV", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            buildConfigField "boolean", "API_ENV", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile project(':SSSocket')
    compile project(':DexInstall')
    compile fileTree(dir: rootProject.rootDir.absolutePath + File.separator + 'jars' + File.separator + 'compileJar', include: ['*.jar'])
    compile fileTree(dir: rootProject.rootDir.absolutePath + File.separator + 'jars' + File.separator + 'libsJar', include: ['*.jar'])
}

task copyHostJarTarget(type: org.gradle.api.tasks.Copy) {
    rename 'combined.jar', project.name + '.jar'
    def pro = project.projectDir.absolutePath;
    from("$pro/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar")
    def root = rootProject.rootDir.absolutePath
    into("$root/jars/providedJar")
}

task deleteAssets(type:org.gradle.api.tasks.Delete){
    def root = project.projectDir ;
    delete "$root"+'/src/main/assets/config/',"$root"+'/src/main/assets/plugins/'
}